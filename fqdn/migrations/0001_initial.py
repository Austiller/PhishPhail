# Generated by Django 2.2 on 2021-05-15 16:57

from django.db import migrations, models
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=64, unique=True)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='DomainPrefix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_prefix', models.CharField(max_length=50)),
                ('slug', models.SlugField(max_length=64, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TopLevelDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tld', models.CharField(max_length=10)),
                ('slug', models.SlugField(max_length=64, null=True, unique=True)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='SquatedWord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('squated_word', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=64, null=True, unique=True)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='KeyWord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=64, unique=True)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', related_name='fqdn_kw_tags', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='FQDN',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fqdn_full', models.CharField(max_length=512, null=True)),
                ('fqdn_tested', models.CharField(max_length=512, null=True)),
                ('fqdn_type', models.CharField(max_length=25, null=True)),
                ('score', models.FloatField(default=0.0, null=True)),
                ('model_match', models.CharField(max_length=128, null=True)),
                ('fqdn_subdomain', models.CharField(max_length=200, null=True)),
                ('fqdn_domain', models.CharField(max_length=200, null=True)),
                ('date_seen', models.DateTimeField(auto_now_add=True)),
                ('entropy', models.FloatField(default=0.0, null=True)),
                ('matched_brands', models.ManyToManyField(to='fqdn.Brand')),
                ('matched_keywords', models.ManyToManyField(to='fqdn.KeyWord')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.AddConstraint(
            model_name='fqdn',
            constraint=models.UniqueConstraint(fields=('fqdn_full',), name='unique_found_fqdn'),
        ),
    ]
